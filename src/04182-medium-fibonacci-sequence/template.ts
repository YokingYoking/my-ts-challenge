type Fibonacci<
  T extends number,
  Prev extends any[] = [],
  Curr extends any[] = [1],
  Times extends any[] = [1]
> = T extends Times["length"]
  ? Curr["length"]
  : Fibonacci<T, [...Curr], [...Prev, ...Curr], [...Times, 1]>;

  // 本题大意简明，要实现斐波那契数列
  // 根据前面的题目，可知在ts中常用的处理数字的方法就是递归给数组压入1，然后计算数组长度
  // 根据斐波那契数列定义，每项都等于前面两项之和，所以另外需要两个数组来记录当前项和前一项的大小以计算下一项
  // 还需要根据输入的T大小来决定递归多少次，所以另外还需要一个数组来记录递归了多少次
  // 后面思路就比较好理解，判断是否已到了T的次数，如果到了直接返回当前项大小
  // 如果没到继续递归调用函数，往后移，所以前一项变成了当前项大小，当前项变成了前一项和当前项之和，然后递归次数+1